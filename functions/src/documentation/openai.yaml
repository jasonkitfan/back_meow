openapi: 3.0.0
info:
  version: 1.0.0
  title: Meow Shelter
  description: API documentation for Meow Shelter
servers:
  - url: https://asia-east2-meow-shelter.cloudfunctions.net/app
securitySchemes:
  firebaseAuth:
    type: apiKey
    name: Authorization
    in: header
    description: |
      Firebase ID token generated by Firebase Authentication.
      See https://firebase.google.com/docs/auth/admin/verify-id-tokens for details on how to generate an ID token.
paths:
  /shelter:
    get:
      summary: Retrieve a list of cats in the shelter
      description: Returns a list of all cats currently in the shelter, sorted by creation date.
      tags:
        - All Visitor
      responses:
        "200":
          description: A successful response containing a list of cats in the shelter.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: The unique ID of the cat.
                    name:
                      type: string
                      description: The name of the cat.
                    breed:
                      type: string
                      description: The breed of the cat.
                    age:
                      type: number
                      format: float
                      description: The age of the cat in years.
                    createAt:
                      type: string
                      format: date-time
                      description: The date and time that the cat was added to the shelter.
                        "500":
                          description: An error occurred while processing the request.
    
    post:
      summary: Add a cat to the shelter
      description: Allows an authenticated user to add a cat to the shelter.
      tags:
        - Employee
      parameters:
        - in: header
          name: Authorization
          description: Access token obtained from authentication
          required: true
          type: string
      requestBody:
        description: The details of the cat to be added.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/AddCatRequest'
      responses:
        "200":
          description: The cat has been successfully added to the shelter.
          schema:
            $ref: '#/definitions/AddCatResponse'
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "500":
          $ref: '#/responses/InternalServerError'
      security:
        - bearerAuth: []
      operationId: addCat
  
  /shelter/donate:
    post:
      summary: Make a donation to the shelter
      description: Accepts a payment for a donation to the shelter using the Stripe payment service.
      tags:
        - Stripe Payment
      requestBody:
        description: The payment details for the donation.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  format: float
                  description: The amount of the donation in HKD.
                paymentMethodId:
                  type: string
                  description: The ID of the Stripe payment method to use for the donation.
      responses:
        "200":
          description: A successful response indicating that the payment was processed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indicates whether the payment was processed successfully.
                    example: true
        "400":
          description: The request was invalid or malformed.
        "500":
          description: An error occurred while processing the donation.
  
  /shelter/adoptCat:
    get:
      summary: Get adoption record for a user
      description: Returns a list of adoption records for a specific user
      tags:
        - Registered User
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - in: header
          name: Authorization
          description: Access token obtained from authentication
          required: true
          type: string
      security:
        - bearerAuth: []
      operationId: adoptCat
      responses:
        200:
          description: A list of adoption records
          schema:
            type: array
            items:
              $ref: '#/definitions/AdoptionRecord'
        404:
          description: No adoption record found for the user
        500:
          description: Unable to get the adoption record
          schema:
            $ref: '#/definitions/Error'

    post:
      summary: Adopt a cat from the shelter
      description: Allows an authenticated user to adopt a cat from the shelter.
      tags:
        - Registered User
      requestBody:
        description: The details ofthe cat to be adopted.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: The unique ID of the cat to be adopted.
                name:
                  type: string
                  description: The name of the cat to be adopted.
                breed:
                  type: string
                  description: The breed of the cat to be adopted.
                gender:
                  type: string
                  description: The gender of the cat to be adopted.
                dob:
                  type: string
                  format: date
                  description: The date of birth of the cat to be adopted.
                imageUrl:
                  type: string
                  description: The URL of the image of the cat to be adopted.
                pickUpDate:
                  type: string
                  format: date-time
                  description: The date and time that the cat will be picked up.
      responses:
        "200":
          description: The cat has been successfully adopted.
        "400":
          description: The request was invalid or malformed.
        "401":
          description: The user is not authenticated or authorized to adopt a cat from the shelter.
        "500":
          description: An error occurred while processing the request.
      parameters:
      - in: header
        name: Authorization
        description: Access token obtained from authentication
        required: true
        type: string    
      security:
        - bearerAuth: []
      operationId: adoptCat

  /shelter/modifyCat:
    post:
      summary: Update a cat in the shelter
      description: Allows an authenticated user to modify the details of a cat in the shelter.
      tags:
        - Employee
      parameters:
        - in: header
          name: Authorization
          description: Access token obtained from authentication
          required: true
          type: string
      requestBody:
        description: The details of the cat to be modified.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/UpdateCatRequest'
      responses:
        "200":
          description: The cat details have been successfully updated.
          schema:
            $ref: '#/definitions/UpdateCatResponse'
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "500":
          $ref: '#/responses/InternalServerError'
      security:
        - bearerAuth: []
      operationId: updateCat
  
  /shelter/{entryId}:
    delete:
      summary: Delete a cat from the shelter
      description: Allows an authenticated user to delete a cat from the shelter using its entry ID.
      tags:
        - Employee
      parameters:
        - in: header
          name: Authorization
          description: Access token obtained from authentication
          required: true
          type: string
        - in: path
          name: entryId
          description: The entry ID of the cat to be deleted
          required: true
          type: string
      responses:
        "200":
          description: The cat has been successfully deleted.
          schema:
            type: object
            properties:
              status:
                type: string
                example: success
              message:
                type: string
                example: "entry deleted successfully"
        "401":
          description: Unauthorized. The user is not authenticated or authorized to perform the request.
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Unauthorized"
        "500":
          description: Internal Server Error. An error occurred while processing the request.
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Internal Server Error"
      security:
        - bearerAuth: []
      operationId: deleteCat

  /shelter/userRole:
    post:
      summary: Update the role of the authenticated user
      description: Allows an authenticated user to update their role using a code.
      tags:
        - Employee
      parameters:
        - in: header
          name: Authorization
          description: Access token obtained from authentication
          required: true
          type: string
      requestBody:
        description: The code used to update the user's role.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/UpdateUserRoleRequest'
      responses:
        "200":
          description: The user's role has been successfully updated.
          schema:
            $ref: '#/definitions/UpdateUserRoleResponse'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          description: The code or user was not found.
          schema:
            type: object
            properties:
              status:
                type: string
                example: failed
              message:
                type: string
                example: Code not found or No matching documents.
        "500":
          $ref: '#/responses/InternalServerError'
      security:
        - Bearer: []
      operationId: updateUserRole

  /shelter/userInfo:
    post:
      summary: Update the name and email of the authenticated user
      description: Allows an authenticated user to update their name and email.
      tags:
        - All Registered User
      parameters:
        - in: header
          name: Authorization
          description: Access token obtained from authentication
          required: true
          type: string
      requestBody:
        description: The updated name and email of the user.
        required: false
        content:
          application/json:
            schema:
              $ref: '#/definitions/UpdateUserInfoRequest'
      responses:
        "200":
          description: The user's name and email have been successfully updated.
          schema:
            $ref: '#/definitions/UpdateUserInfoResponse'
        "401":
          $ref: '#/responses/Unauthorized'
        "500":
          $ref: '#/responses/InternalServerError'
      security:
        - Bearer: []
      operationId: updateUserInfo
    
    get:
      summary: Get user information
      description: Retrieves the name, email, and role of the authenticated user.
      tags:
        - All Registered User
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: The name of the user.
                  email:
                    type: string
                    format: email
                    description: The email address of the user.
                  role:
                    type: string
                    description: The role of the user.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: User not found
          content:
            text/plain:
              schema:
                type: string
        '500':
          $ref: '#/components/responses/InternalServerError'

  /shelter/identifyBreed:
    post:
      summary: Identify cat breed
      description: Identifies the breed of a cat from an image using the Zyla Labs API.
      tags:
        - Zyla
      security:
        - bearerAuth: []
      requestBody:
        description: Base64-encoded image data.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                base64Image:
                  type: string
                  format: byte
              required:
                - base64Image
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indicates whether the request was successful.
                  data:
                    type: object
                    description: The breed information returned by the Zyla Labs API.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /shelter/email:
    post:
      summary: Send an email to the shelter.
      requestBody:
        description: The details of the email to send.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the sender.
                  example: John Doe
                email:
                  type: string
                  format: email
                  description: The email address of the sender.
                  example: john.doe@example.com
                content:
                  type: string
                  description: The content of the email.
                  example: Hello, I would like to adopt a cat.
              required:
                - name
                - email
                - content
      responses:
        '200':
          description: The email was successfully sent.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The status of the email sending operation.
                    example: success
                  message:
                    type: string
                    description: A message describing the result of the email sending operation.
                    example: Your message has been sent to the shelter.
        '500':
          description: The email could not be sent.
          content:
            application/json:
              schema:
               type: object
                properties:
                  status:
                    type: string
                    description: The status of the email sending operation.
                    example: failed
                  message:
                    type: string
                    description: A message describing the result of the email sending operation.
                    example: Unable to send your message.
      tags:
        - All Visitor
      operationId: sendEmail